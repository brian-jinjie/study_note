什么是集群?
  >一组通过高速网络互联的计算组,并以单一系统的模式加以管理.
  >将很多服务器集中在一个,提供同一服务,在客户端看来就像一个服务器.
  >可以在付出较低成本的情况下获得在性能,可靠性,灵活性方面的相对较高的效益
  >任务调度是集群系统中的核心技术.

集群目的:
1.提供性能 2.降低成本 3.提高可靠性 4.增强可靠性(预防单点故障) 5.提高可扩展性

集群分类:
高性能计算集群(HPC):通过以集群开发的并行应用程序,解决复杂的科学问题
负载均衡(LB)集群:客户端负载在计算机集群中尽可能平均分摊.
高可用(HA)集群:避免单点故障,当一个系统发生故障时,可以快速迁移.

Lvs可以实现高可用,可伸缩的Web,Mail,Cache和Mdgia等网络服务
#########################################################
LVS集群组成
前端:负载均衡层
-由一台或多台负载调度器构成
中间:服务器群组层
-由一组实际运行应用服务的服务器组成
底层:数据共享存储层
-提供共享存储空间的存储区域
#################################################
LVS术语
Director Server:调度服务器
-将负载分发到Real Server的服务器
Real Server : 真实服务器
-真正提供应用服务的服务器
VIP:虚拟IP地址
-公布给用户访问的虚拟IP地址
RIP:真实IP地址
-集群节点上使用的IP地址
DIP:调度器连接节点上使用的IP地址

LVS工作模式:
VS/NAT(-m)
   -通过网络地址转换实现的虚拟服务器
   -大并发访问时,调度器的性能成为瓶颈
VS/DR(-g)
  -直接使用路由技术实现虚拟服务器
  -节点服务器需要配置VIP,注意MAC地址广播
VS/TUN(-i)
  -通过隧道方式实现虚拟服务器




#########################################
负载均衡调度算法
LVS目前实现了10种调度算法
常用调度算法:
轮询(rr)Rount Robin :将客户端请求平均发到Real Server.
加权轮询(wrr)Weighted Round Robin:根据Real Server 权重值进行轮询调度.
最少连接(lc)Least Connections:选择连接数最少的服务器.
加权最少连接(wlc):根据Real Server权重值,选择连接数最少的服务器.
源地址散列(Source Hashing):根据请求的目标IP地址,作为散列键(Hash Key)
的散列表找出对应服务器.相当于nginx中的ip_hash.
不常用调度算法:
  -基于局部性的最少连接
  -带复制的基于局部性最少链接
  -目标地址散列(DH)
  -最短的期望的延迟
  -最少队列
##########################################    
          ipvsadm命令选项
          
ipvsadm -A        #(add)添加虚拟服务器
ipvsadm -E        #(editer)修改虚拟服务器
ipvsadm -D        #(delete)删除单个虚拟服务器
ipvsadm -C        #删除所有虚拟服务
ipvsadm -a        #(add)创建真实服务器
ipvsadm -e        #(editer)修改真实服务器
ipvsadm -d        #(delete)删除创建真实服务器
ipvsadm -L        #查看lvs规则表
-s [rr|wrr|lc|wlc|sh]   #指定集群算法
-------------------------------------------
          ipvsadm语法案例
ipvsadm -A -t|u 192.168.4.5:80  -s 算法   
ipvsadm -E -t|u 192.168.4.5:80  -s 算法
ipvsadm -D -t|u 192.168.4.5:80  
ipvsadm -C 
ipvsadm -a -t|u 192.168.4.5:80 -r 192.168.2.100 [-g|i|m] [-m]
ipvsadm -e -t|u 192.168.4.5:80 -r 192.168.2.100 [-g|i|m] [-m]
ipvsadm -d -t|u 192.168.4.5:80 -r 192.168.2.100
ipvsadm -Ln 

注意!!!以上命令都是临时命令,重启后丢失
永久保存设置方式为:ipvsadm-save -n  > /etc/sysconfig/ipvsadm

临时开启调度器的路由转发功能
[root@proxy ~]# echo 1 > /proc/sys/net/ipv4/ip_forward

永久开启调度器的路由转发功能
[root@proxy ~]# echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf

经典案例:



3.3 步骤
实现此案例需要按照如下步骤进行。
说明：
CIP是客户端的IP地址；
VIP是对客户端提供服务的IP地址；
RIP是后端服务器的真实IP地址；
DIP是调度器与后端服务器通信的IP地址（VIP必须配置在虚拟接口）。
步骤一：配置实验网络环境
1）设置Proxy代理服务器的VIP和DIP
注意：为了防止冲突，VIP必须要配置在网卡的虚拟接口！！！
 [root@proxy ~]# cd /etc/sysconfig/network-scripts/
[root@proxy ~]# cp ifcfg-eth0{,:0}
[root@proxy ~]# vim ifcfg-eth0
TYPE=Ethernet
BOOTPROTO=none
NAME=eth0
DEVICE=eth0
ONBOOT=yes
IPADDR=192.168.4.5
PREFIX=24
[root@proxy ~]# vim ifcfg-eth0:0
TYPE=Ethernet
BOOTPROTO=none
DEFROUTE=yes
NAME=eth0:0
DEVICE=eth0:0
ONBOOT=yes
IPADDR=192.168.4.15
PREFIX=24
[root@proxy ~]# systemctl restart network
2）设置Web1服务器网络参数
[root@web1 ~]# nmcli connection modify eth0 ipv4.method manual \
ipv4.addresses 192.168.4.100/24 connection.autoconnect yes
[root@web1 ~]# nmcli connection up eth0
接下来给web1配置VIP地址。
注意：这里的子网掩码必须是32（也就是全255），网络地址与IP地址一样，广播地址与IP地址也一样。
[root@web1 ~]# cd /etc/sysconfig/network-scripts/
[root@web1 ~]# cp ifcfg-lo{,:0}
[root@web1 ~]# vim ifcfg-lo:0
DEVICE=lo:0
IPADDR=192.168.4.15
NETMASK=255.255.255.255
NETWORK=192.168.4.15
BROADCAST=192.168.4.15
ONBOOT=yes
NAME=lo:0
防止地址冲突的问题：
这里因为web1也配置与代理一样的VIP地址，默认肯定会出现地址冲突；
sysctl.conf文件写入这下面四行的主要目的就是访问192.168.4.15的数据包，只有调度器会响应，其他主机都不做任何响应，这样防止地址冲突的问题。
[root@web1 ~]# vim /etc/sysctl.conf
#net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.lo.arp_ignore = 1
net.ipv4.conf.lo.arp_announce = 2
net.ipv4.conf.all.arp_announce = 2
#当有arp广播问谁是192.168.4.15时，本机忽略该ARP广播，不做任何回应
#本机不要向外宣告自己的lo回环地址是192.168.4.15
[root@web1 ~]# sysctl -p
重启网络服务，设置防火墙与SELinux
[root@web1 ~]# systemctl restart network
[root@web1 ~]# ifconfig
[root@web1 ~]# systemctl stop firewalld
[root@web1 ~]# setenforce 0
3）设置Web2服务器网络参数
[root@web2 ~]# nmcli connection modify eth0 ipv4.method manual \
ipv4.addresses 192.168.4.200/24 connection.autoconnect yes
[root@web2 ~]# nmcli connection up eth0手动写入如下4行内容

接下来给web2配置VIP地址
注意：这里的子网掩码必须是32（也就是全255），网络地址与IP地址一样，广播地址与IP地址也一样。
[root@web2 ~]# cd /etc/sysconfig/network-scripts/
[root@web2 ~]# cp ifcfg-lo{,:0}
[root@web2 ~]# vim ifcfg-lo:0
DEVICE=lo:0
IPADDR=192.168.4.15
NETMASK=255.255.255.255
NETWORK=192.168.4.15
BROADCAST=192.168.4.15
ONBOOT=yes
NAME=lo:0
防止地址冲突的问题：
这里因为web1也配置与代理一样的VIP地址，默认肯定会出现地址冲突；
sysctl.conf文件写入这下面四行的主要目的就是访问192.168.4.15的数据包，只有调度器会响应，其他主机都不做任何响应，这样防止地址冲突的问题。
[root@web2 ~]# vim /etc/sysctl.conf
#手动写入如下4行内容
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.lo.arp_ignore = 1
net.ipv4.conf.lo.arp_announce = 2
net.ipv4.conf.all.arp_announce = 2
#当有arp广播问谁是192.168.4.15时，本机忽略该ARP广播，不做任何回应
#本机不root@web2 ~]# sysctl -p
重启网络服务，设置防火墙与SELinux
[root@web2 ~]# systemctl restart network
[root@web2 ~]# ifconfig
[root@web2 ~]# systemctl stop firewalld
[root@web2 ~]# setenforce 0
步骤二：proxy调度器安装软件并部署LVS-DR模式调度器
1）安装软件（如果已经安装，此步骤可以忽略）
[root@proxy ~]# yum -y install ipvsadm
2）清理之前实验的规则，创建新的集群服务器规则要向外宣告自己的lo回环地址是192.168.4.15
root@proxy ~]# ipvsadm -C                                #清空所有规则
[root@proxy ~]# ipvsadm -A -t 192.168.4.15:80 -s wrr
3）添加真实服务器(-g参数设置LVS工作模式为DR模式，-w设置权重)
[root@proxy ~]# ipvsadm -a -t 192.168.4.15:80 -r 192.168.4.100 -g -w 1
[root@proxy ~]# ipvsadm -a -t 192.168.4.15:80 -r 192.168.4.200 -g -w 1
4）查看规则列表，并保存规则
[root@proxy ~]# ipvsadm -Ln
TCP  192.168.4.15:80 wrr
  -> 192.168.4.100:80             Route   1      0          0         
  -> 192.168.4.200:80             Route   2      0          0
[root@proxy ~]# ipvsadm-save -n > /etc/sysconfig/ipvsadm
步骤三：客户端测试
客户端使用curl命令反复连接http://192.168.4.15，查看访问的页面是否会轮询到不同的后端真实服务器。
扩展知识：默认LVS不带健康检查功能，需要自己手动编写动态检测脚本，实现该功能：(参考脚本如下，仅供参考)
[root@proxy ~]# vim check.sh
#!/bin/bash
VIP=192.168.4.15:80
RIP1=192.168.4.100
RIP2=192.168.4.200
while :
do
   for IP in $RIP1 $RIP2
   do
           curl -s http://$IP &>/dev/vnull
if [ $? -eq 0 ];then
            ipvsadm -Ln |grep -q $IP || ipvsadm -a -t $VIP -r $IP
        else
             ipvsadm -Ln |grep -q $IP && ipvsadm -d -t $VIP -r $IP
        fi
   done
sleep 1
done






